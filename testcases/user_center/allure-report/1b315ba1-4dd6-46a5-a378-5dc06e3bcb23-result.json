{"name": "注册账号", "status": "broken", "statusDetails": {"message": "Exception: ('xpath', 'a[@href=\"#/app/home/member/userinfo\"]') fails to locate, error info: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=115.0.5790.171)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF73F9C4A62+57106]\n\t(No symbol) [0x00007FF73F93CF52]\n\t(No symbol) [0x00007FF73F80E2CB]\n\t(No symbol) [0x00007FF73F7EDEB9]\n\t(No symbol) [0x00007FF73F86AE07]\n\t(No symbol) [0x00007FF73F87DBEF]\n\t(No symbol) [0x00007FF73F866793]\n\t(No symbol) [0x00007FF73F83CE81]\n\t(No symbol) [0x00007FF73F83E064]\n\tGetHandleVerifier [0x00007FF73FC74222+2873042]\n\tGetHandleVerifier [0x00007FF73FCC6590+3209792]\n\tGetHandleVerifier [0x00007FF73FCBF3AF+3180639]\n\tGetHandleVerifier [0x00007FF73FA55F25+652245]\n\t(No symbol) [0x00007FF73F948618]\n\t(No symbol) [0x00007FF73F9447C4]\n\t(No symbol) [0x00007FF73F9448BC]\n\t(No symbol) [0x00007FF73F934C33]\n\tBaseThreadInitThunk [0x00007FF9FB7B26AD+29]\n\tRtlUserThreadStart [0x00007FF9FC66AA68+40]", "trace": "self = <page.user_page.UserPage object at 0x00000238AD83A9A0>\nlocator = ('xpath', 'a[@href=\"#/app/home/member/userinfo\"]')\nconditon = 'visibility', retry = 1\n\n    def find_element(self, locator, conditon = 'visibility', retry = 1):\n        for time in range(retry + 1):\n            try:\n                logger.info(f'Locationg the element {locator}')\n                if conditon == 'visibility':\n>                   node  = self.wait.until(EC.visibility_of_element_located(locator))\n\n..\\..\\page\\base_page.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:152: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000238AD8930A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF73F934C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9FB7B26AD+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF9FC66AA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=115.0.5790.171)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF73F9C4A62+57106]\nE       \t(No symbol) [0x00007FF73F93CF52]\nE       \t(No symbol) [0x00007FF73F80E2CB]\nE       \t(No symbol) [0x00007FF73F7EDEB9]\nE       \t(No symbol) [0x00007FF73F86AE07]\nE       \t(No symbol) [0x00007FF73F87DBEF]\nE       \t(No symbol) [0x00007FF73F866793]\nE       \t(No symbol) [0x00007FF73F83CE81]\nE       \t(No symbol) [0x00007FF73F83E064]\nE       \tGetHandleVerifier [0x00007FF73FC74222+2873042]\nE       \tGetHandleVerifier [0x00007FF73FCC6590+3209792]\nE       \tGetHandleVerifier [0x00007FF73FCBF3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF73FA55F25+652245]\nE       \t(No symbol) [0x00007FF73F948618]\nE       \t(No symbol) [0x00007FF73F9447C4]\nE       \t(No symbol) [0x00007FF73F9448BC]\nE       \t(No symbol) [0x00007FF73F934C33]\nE       \tBaseThreadInitThunk [0x00007FF9FB7B26AD+29]\nE       \tRtlUserThreadStart [0x00007FF9FC66AA68+40]\n\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.user_center.test_user.TestUser object at 0x00000238AD83A8E0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f6629014ac44b24e92de0fe32dcbabea\")>\n\n    @allure.title('注册账号')\n    def test_register(self, driver):\n        page = UserPage(driver)\n        data = read_yaml()['register_ok']\n        with allure.step('Click register botton'):\n            page.click(page.btn_register)\n    \n        with allure.step('Input username'):\n            page.send_keys(page.input_phone, str(data['mobile']))\n    \n        with allure.step('Fetch authentication code'):\n            page.click(page.btn_code)\n    \n        with allure.step('获取验证码'):\n            # sql = f\"SELECT code FROM users_verifycode WHERE mobile ={str(data['mobile'])} ORDER BY id LIMITI 1\"\n            mobile = str(data['mobile'])\n            sql = f\"select code from users_verifycode where mobile = {mobile} order by id desc limit 1;\"\n            code = db.select_db_one(sql)['code']\n    \n        with allure.step(\"输入验证码\"):\n            page.send_keys(page.input_code, code)\n    \n        with allure.step('输入密码'):\n            page.send_keys(page.input_password, data['password'])\n    \n        with allure.step('点击注册并登录'):\n            page.click(page.btn_reg_and_login)\n    \n>       text = page.get_text(page.user_name)\n\ntest_user.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\page\\base_page.py:83: in get_text\n    node = self.find_element(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.user_page.UserPage object at 0x00000238AD83A9A0>\nlocator = ('xpath', 'a[@href=\"#/app/home/member/userinfo\"]')\nconditon = 'visibility', retry = 1\n\n    def find_element(self, locator, conditon = 'visibility', retry = 1):\n        for time in range(retry + 1):\n            try:\n                logger.info(f'Locationg the element {locator}')\n                if conditon == 'visibility':\n                    node  = self.wait.until(EC.visibility_of_element_located(locator))\n                else:\n                    node = self.wait.until(EC.presence_of_element_located(locator))\n                return node\n            except Exception as e:\n                error_info = f'{locator} fails to locate, error info: {e}'\n                logger.error(error_info)\n                if time < retry:\n                    logger.info(f'Re-locationg the location, current time: {time + 1}')\n                else:\n>                   raise Exception(error_info)\nE                   Exception: ('xpath', 'a[@href=\"#/app/home/member/userinfo\"]') fails to locate, error info: Message: no such window: target window already closed\nE                   from unknown error: web view not found\nE                     (Session info: chrome=115.0.5790.171)\nE                   Stacktrace:\nE                   Backtrace:\nE                   \tGetHandleVerifier [0x00007FF73F9C4A62+57106]\nE                   \t(No symbol) [0x00007FF73F93CF52]\nE                   \t(No symbol) [0x00007FF73F80E2CB]\nE                   \t(No symbol) [0x00007FF73F7EDEB9]\nE                   \t(No symbol) [0x00007FF73F86AE07]\nE                   \t(No symbol) [0x00007FF73F87DBEF]\nE                   \t(No symbol) [0x00007FF73F866793]\nE                   \t(No symbol) [0x00007FF73F83CE81]\nE                   \t(No symbol) [0x00007FF73F83E064]\nE                   \tGetHandleVerifier [0x00007FF73FC74222+2873042]\nE                   \tGetHandleVerifier [0x00007FF73FCC6590+3209792]\nE                   \tGetHandleVerifier [0x00007FF73FCBF3AF+3180639]\nE                   \tGetHandleVerifier [0x00007FF73FA55F25+652245]\nE                   \t(No symbol) [0x00007FF73F948618]\nE                   \t(No symbol) [0x00007FF73F9447C4]\nE                   \t(No symbol) [0x00007FF73F9448BC]\nE                   \t(No symbol) [0x00007FF73F934C33]\nE                   \tBaseThreadInitThunk [0x00007FF9FB7B26AD+29]\nE                   \tRtlUserThreadStart [0x00007FF9FC66AA68+40]\n\n..\\..\\page\\base_page.py:31: Exception"}, "steps": [{"name": "Click register botton", "status": "passed", "start": 1691917623544, "stop": 1691917623623}, {"name": "Input username", "status": "passed", "start": 1691917623623, "stop": 1691917623732}, {"name": "Fetch authentication code", "status": "passed", "start": 1691917623732, "stop": 1691917623792}, {"name": "获取验证码", "status": "passed", "start": 1691917623792, "stop": 1691917623847}, {"name": "输入验证码", "status": "passed", "start": 1691917623847, "stop": 1691917623907}, {"name": "输入密码", "status": "passed", "start": 1691917623907, "stop": 1691917623998}, {"name": "点击注册并登录", "status": "passed", "start": 1691917623998, "stop": 1691917624042}], "attachments": [{"name": "log", "source": "6d258063-d834-4892-9a5f-63b9eccdab79-attachment.txt", "type": "text/plain"}], "start": 1691917623544, "stop": 1691917628303, "uuid": "b2a90361-14f9-4934-960d-f96e2098774a", "historyId": "0b0e5f75fbb82d51ff445c0a076c28f1", "testCaseId": "0b0e5f75fbb82d51ff445c0a076c28f1", "fullName": "testcases.user_center.test_user.TestUser#test_register", "labels": [{"name": "feature", "value": "Module: User"}, {"name": "epic", "value": "Project: Meike Market"}, {"name": "parentSuite", "value": "testcases.user_center"}, {"name": "suite", "value": "test_user"}, {"name": "subSuite", "value": "TestUser"}, {"name": "host", "value": "Ted"}, {"name": "thread", "value": "25532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.user_center.test_user"}]}